$date
	Tue Jul  9 17:27:13 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module status_value_vector_tb $end
$var wire 1 ! value_o $end
$var wire 1 " valid_o $end
$var wire 1 # full_o $end
$var reg 1 $ clk_i $end
$var reg 1 % pull_i $end
$var reg 1 & push_i $end
$var reg 1 ' rsn_i $end
$var reg 1 ( value_i $end
$scope module dut $end
$var wire 1 $ clk_i $end
$var wire 1 ) empty $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 ' rsn_i $end
$var wire 1 ( value_i $end
$var wire 1 ! value_o $end
$var wire 1 " valid_o $end
$var wire 32 * update_vector_d [31:0] $end
$var wire 32 + status_vector_d [31:0] $end
$var wire 32 , nxt_vector_d [31:0] $end
$var wire 1 # full_o $end
$var wire 32 - carry_vector_d [31:0] $end
$var reg 32 . status_vector_q [31:0] $end
$var reg 32 / valid_vector_q [31:0] $end
$scope begin comb_logic[0] $end
$scope module status_value_logic_inst $end
$var wire 1 0 actual_i $end
$var wire 1 1 carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 2 next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 3 update_en_a $end
$var wire 1 4 update_en_b $end
$var wire 1 5 update_i $end
$var wire 1 6 valid_i $end
$var wire 1 ( value_i $end
$var reg 1 7 q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[1] $end
$scope module status_value_logic_inst $end
$var wire 1 8 actual_i $end
$var wire 1 9 carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 : next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 ; update_en_a $end
$var wire 1 < update_en_b $end
$var wire 1 = update_i $end
$var wire 1 > valid_i $end
$var wire 1 ( value_i $end
$var reg 1 ? q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[2] $end
$scope module status_value_logic_inst $end
$var wire 1 @ actual_i $end
$var wire 1 A carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 B next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 C update_en_a $end
$var wire 1 D update_en_b $end
$var wire 1 E update_i $end
$var wire 1 F valid_i $end
$var wire 1 ( value_i $end
$var reg 1 G q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[3] $end
$scope module status_value_logic_inst $end
$var wire 1 H actual_i $end
$var wire 1 I carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 J next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 K update_en_a $end
$var wire 1 L update_en_b $end
$var wire 1 M update_i $end
$var wire 1 N valid_i $end
$var wire 1 ( value_i $end
$var reg 1 O q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[4] $end
$scope module status_value_logic_inst $end
$var wire 1 P actual_i $end
$var wire 1 Q carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 R next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 S update_en_a $end
$var wire 1 T update_en_b $end
$var wire 1 U update_i $end
$var wire 1 V valid_i $end
$var wire 1 ( value_i $end
$var reg 1 W q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[5] $end
$scope module status_value_logic_inst $end
$var wire 1 X actual_i $end
$var wire 1 Y carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 Z next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 [ update_en_a $end
$var wire 1 \ update_en_b $end
$var wire 1 ] update_i $end
$var wire 1 ^ valid_i $end
$var wire 1 ( value_i $end
$var reg 1 _ q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[6] $end
$scope module status_value_logic_inst $end
$var wire 1 ` actual_i $end
$var wire 1 a carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 b next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 c update_en_a $end
$var wire 1 d update_en_b $end
$var wire 1 e update_i $end
$var wire 1 f valid_i $end
$var wire 1 ( value_i $end
$var reg 1 g q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[7] $end
$scope module status_value_logic_inst $end
$var wire 1 h actual_i $end
$var wire 1 i carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 j next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 k update_en_a $end
$var wire 1 l update_en_b $end
$var wire 1 m update_i $end
$var wire 1 n valid_i $end
$var wire 1 ( value_i $end
$var reg 1 o q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[8] $end
$scope module status_value_logic_inst $end
$var wire 1 p actual_i $end
$var wire 1 q carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 r next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 s update_en_a $end
$var wire 1 t update_en_b $end
$var wire 1 u update_i $end
$var wire 1 v valid_i $end
$var wire 1 ( value_i $end
$var reg 1 w q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[9] $end
$scope module status_value_logic_inst $end
$var wire 1 x actual_i $end
$var wire 1 y carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 z next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 { update_en_a $end
$var wire 1 | update_en_b $end
$var wire 1 } update_i $end
$var wire 1 ~ valid_i $end
$var wire 1 ( value_i $end
$var reg 1 !" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[10] $end
$scope module status_value_logic_inst $end
$var wire 1 "" actual_i $end
$var wire 1 #" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 $" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 %" update_en_a $end
$var wire 1 &" update_en_b $end
$var wire 1 '" update_i $end
$var wire 1 (" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 )" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[11] $end
$scope module status_value_logic_inst $end
$var wire 1 *" actual_i $end
$var wire 1 +" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 ," next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 -" update_en_a $end
$var wire 1 ." update_en_b $end
$var wire 1 /" update_i $end
$var wire 1 0" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 1" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[12] $end
$scope module status_value_logic_inst $end
$var wire 1 2" actual_i $end
$var wire 1 3" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 4" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 5" update_en_a $end
$var wire 1 6" update_en_b $end
$var wire 1 7" update_i $end
$var wire 1 8" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 9" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[13] $end
$scope module status_value_logic_inst $end
$var wire 1 :" actual_i $end
$var wire 1 ;" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 <" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 =" update_en_a $end
$var wire 1 >" update_en_b $end
$var wire 1 ?" update_i $end
$var wire 1 @" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 A" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[14] $end
$scope module status_value_logic_inst $end
$var wire 1 B" actual_i $end
$var wire 1 C" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 D" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 E" update_en_a $end
$var wire 1 F" update_en_b $end
$var wire 1 G" update_i $end
$var wire 1 H" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 I" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[15] $end
$scope module status_value_logic_inst $end
$var wire 1 J" actual_i $end
$var wire 1 K" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 L" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 M" update_en_a $end
$var wire 1 N" update_en_b $end
$var wire 1 O" update_i $end
$var wire 1 P" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 Q" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[16] $end
$scope module status_value_logic_inst $end
$var wire 1 R" actual_i $end
$var wire 1 S" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 T" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 U" update_en_a $end
$var wire 1 V" update_en_b $end
$var wire 1 W" update_i $end
$var wire 1 X" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 Y" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[17] $end
$scope module status_value_logic_inst $end
$var wire 1 Z" actual_i $end
$var wire 1 [" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 \" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 ]" update_en_a $end
$var wire 1 ^" update_en_b $end
$var wire 1 _" update_i $end
$var wire 1 `" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 a" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[18] $end
$scope module status_value_logic_inst $end
$var wire 1 b" actual_i $end
$var wire 1 c" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 d" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 e" update_en_a $end
$var wire 1 f" update_en_b $end
$var wire 1 g" update_i $end
$var wire 1 h" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 i" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[19] $end
$scope module status_value_logic_inst $end
$var wire 1 j" actual_i $end
$var wire 1 k" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 l" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 m" update_en_a $end
$var wire 1 n" update_en_b $end
$var wire 1 o" update_i $end
$var wire 1 p" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 q" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[20] $end
$scope module status_value_logic_inst $end
$var wire 1 r" actual_i $end
$var wire 1 s" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 t" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 u" update_en_a $end
$var wire 1 v" update_en_b $end
$var wire 1 w" update_i $end
$var wire 1 x" valid_i $end
$var wire 1 ( value_i $end
$var reg 1 y" q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[21] $end
$scope module status_value_logic_inst $end
$var wire 1 z" actual_i $end
$var wire 1 {" carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 |" next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 }" update_en_a $end
$var wire 1 ~" update_en_b $end
$var wire 1 !# update_i $end
$var wire 1 "# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 ## q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[22] $end
$scope module status_value_logic_inst $end
$var wire 1 $# actual_i $end
$var wire 1 %# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 &# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 '# update_en_a $end
$var wire 1 (# update_en_b $end
$var wire 1 )# update_i $end
$var wire 1 *# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 +# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[23] $end
$scope module status_value_logic_inst $end
$var wire 1 ,# actual_i $end
$var wire 1 -# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 .# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 /# update_en_a $end
$var wire 1 0# update_en_b $end
$var wire 1 1# update_i $end
$var wire 1 2# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 3# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[24] $end
$scope module status_value_logic_inst $end
$var wire 1 4# actual_i $end
$var wire 1 5# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 6# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 7# update_en_a $end
$var wire 1 8# update_en_b $end
$var wire 1 9# update_i $end
$var wire 1 :# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 ;# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[25] $end
$scope module status_value_logic_inst $end
$var wire 1 <# actual_i $end
$var wire 1 =# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 ># next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 ?# update_en_a $end
$var wire 1 @# update_en_b $end
$var wire 1 A# update_i $end
$var wire 1 B# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 C# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[26] $end
$scope module status_value_logic_inst $end
$var wire 1 D# actual_i $end
$var wire 1 E# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 F# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 G# update_en_a $end
$var wire 1 H# update_en_b $end
$var wire 1 I# update_i $end
$var wire 1 J# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 K# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[27] $end
$scope module status_value_logic_inst $end
$var wire 1 L# actual_i $end
$var wire 1 M# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 N# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 O# update_en_a $end
$var wire 1 P# update_en_b $end
$var wire 1 Q# update_i $end
$var wire 1 R# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 S# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[28] $end
$scope module status_value_logic_inst $end
$var wire 1 T# actual_i $end
$var wire 1 U# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 V# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 W# update_en_a $end
$var wire 1 X# update_en_b $end
$var wire 1 Y# update_i $end
$var wire 1 Z# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 [# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[29] $end
$scope module status_value_logic_inst $end
$var wire 1 \# actual_i $end
$var wire 1 ]# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 ^# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 _# update_en_a $end
$var wire 1 `# update_en_b $end
$var wire 1 a# update_i $end
$var wire 1 b# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 c# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[30] $end
$scope module status_value_logic_inst $end
$var wire 1 d# actual_i $end
$var wire 1 e# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 f# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 g# update_en_a $end
$var wire 1 h# update_en_b $end
$var wire 1 i# update_i $end
$var wire 1 j# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 k# q_o $end
$upscope $end
$upscope $end
$scope begin comb_logic[31] $end
$scope module status_value_logic_inst $end
$var wire 1 l# actual_i $end
$var wire 1 m# carry_i $end
$var wire 1 ) empty_i $end
$var wire 1 n# next_i $end
$var wire 1 % pull_i $end
$var wire 1 & push_i $end
$var wire 1 o# update_en_a $end
$var wire 1 p# update_en_b $end
$var wire 1 q# update_i $end
$var wire 1 r# valid_i $end
$var wire 1 ( value_i $end
$var reg 1 s# q_o $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
15
04
13
02
01
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b1 *
1)
0(
0'
0&
0%
0$
0#
0"
0!
$end
#10
1$
#20
0$
#30
1$
#40
0$
#50
1$
#60
0$
#70
1$
#80
0$
1'
#90
1$
#100
0$
b1 +
17
1(
1&
#110
03
b11 +
1?
1;
14
0)
1=
16
b11 *
1"
10
1!
b1 /
b1 .
1$
#120
0$
#130
b111 +
1G
04
0;
1C
12
1<
1E
11
18
b1 ,
1>
b111 *
b1 -
b11 .
b11 /
1$
#140
0$
#150
b1111 +
1O
0<
0C
1K
1D
1M
19
1:
1F
b1111 *
b11 -
1@
b11 ,
b111 /
b111 .
1$
#160
0$
#170
b11111 +
1W
0D
0K
1S
1B
1L
1U
1A
1H
b111 ,
1N
b11111 *
b111 -
b1111 .
b1111 /
1$
#180
0$
0O
b111 +
0W
1%
0&
#190
1D
1K
0S
b11 +
0G
0L
0U
0A
0B
0N
b1111 *
b11 -
0H
b11 ,
b111 /
b111 .
1$
#200
0$
#210
1<
b1 +
0?
1C
0K
0:
0D
0M
09
0@
b1 ,
0F
b111 *
b1 -
b11 .
b11 /
1$
#220
0$
#230
14
1;
0C
b0 +
07
0<
0E
01
02
0>
b11 *
b0 -
08
b0 ,
b1 /
b1 .
1$
#240
0$
#250
13
0;
04
1)
0=
00
0!
06
b1 *
0"
b0 .
b0 /
1$
#260
0$
#270
1$
#280
0$
0(
1&
#290
03
1;
14
0)
1=
16
b11 *
1"
b1 /
1$
#300
0$
#310
1$
#320
0$
b1 +
17
1(
#330
10
1!
b1 .
1$
#340
0$
#350
1$
#360
0$
#370
1$
#380
0$
#390
1$
#400
0$
b0 +
07
0(
0&
#410
13
0;
04
1)
0=
00
0!
06
b1 *
0"
b0 .
b0 /
1$
#420
0$
#430
1$
#440
0$
#450
1$
#460
0$
#470
1$
#480
0$
#490
1$
#500
0$
#510
1$
#520
0$
#530
1$
#540
0$
#550
1$
#560
0$
#570
1$
#580
0$
#590
1$
#600
0$
#610
1$
#620
0$
#630
1$
#640
0$
#650
1$
#660
0$
#670
1$
#680
0$
#690
1$
#700
0$
#710
1$
#720
0$
#730
1$
#740
0$
#750
1$
#760
0$
#770
1$
#780
0$
#790
1$
#800
0$
#810
1$
#820
0$
#830
1$
#840
0$
#850
1$
#860
0$
#870
1$
#880
0$
#890
1$
#900
0$
#910
1$
#920
0$
#930
1$
#940
0$
#950
1$
#960
0$
#970
1$
#980
0$
#990
1$
#1000
0$
#1010
1$
#1020
0$
#1030
1$
#1040
0$
